/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import * as Joi from "joi"
import { Stream } from "ts-stream"
import { PluginServiceActionParamsBase, serviceActionParamsSchema } from "../base"
import { dedent } from "../../../util/string"
import { Module } from "../../module"
import { RuntimeContext, runtimeContextSchema } from "../../service"

export interface GetServiceLogsParams<M extends Module = Module, S extends Module = Module>
  extends PluginServiceActionParamsBase<M, S> {
  runtimeContext: RuntimeContext
  stream: Stream<ServiceLogEntry>
  follow: boolean
  tail: number
  startTime?: Date
}

export interface ServiceLogEntry {
  serviceName: string
  timestamp?: Date
  msg: string
}

export const serviceLogEntrySchema = Joi.object()
  .keys({
    serviceName: Joi.string()
      .required()
      .description("The name of the service the log entry originated from."),
    timestamp: Joi.date()
      .required()
      .description("The time when the log entry was generated by the service."),
    msg: Joi.string()
      .required()
      .description("The content of the log entry."),
  })
  .description("A log entry returned by a getServiceLogs action handler.")

export interface GetServiceLogsResult { }

export const getServiceLogs = {
  description: dedent`
    Retrieve a stream of logs for the specified service, optionally waiting listening for new logs.

    Called by the \`garden logs\` command.
  `,

  paramsSchema: serviceActionParamsSchema
    .keys({
      runtimeContext: runtimeContextSchema,
      stream: Joi.object()
        .description("A Stream object, to write the logs to."),
      follow: Joi.boolean()
        .description("Whether to keep listening for logs until aborted."),
      tail: Joi.number()
        .description("Number of lines to get from end of log. Defaults to -1, showing all log lines.")
        .default(-1),
      startTime: Joi.date()
        .optional()
        .description("If set, only return logs that are as new or newer than this date."),
    }),

  resultSchema: Joi.object().keys({}),
}
